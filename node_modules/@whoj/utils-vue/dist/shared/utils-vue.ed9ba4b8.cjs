'use strict';

class PropFactory {
  constructor(type) {
    this.type = type;
  }
  def(value) {
    this.default = value;
    return this;
  }
  valid(validator) {
    this.validator = validator;
    return this;
  }
  get isRequired() {
    this.required = true;
    return this;
  }
}
function defineProp(type) {
  return new PropFactory(type);
}
function literalType() {
  return defineProp([
    String,
    Boolean,
    Number
  ]);
}

class Prop {
  static get string() {
    return defineProp(String);
  }
  static get number() {
    return defineProp(Number);
  }
  static get stringNumber() {
    return defineProp([String, Number]);
  }
  static get boolean() {
    return defineProp(Boolean);
  }
  static get symbol() {
    return defineProp(Symbol);
  }
  static get date() {
    return defineProp(Date);
  }
  static get vNode() {
    return defineProp([String, Object]);
  }
  static get css() {
    return defineProp(Object);
  }
  static object() {
    return defineProp(Object);
  }
  static array() {
    return defineProp(Array);
  }
  static function() {
    return { type: Function };
  }
  static boolOpt(def = false) {
    return defineProp(Boolean).def(def);
  }
  static numberOpt(def) {
    return defineProp(Number).def(def || null);
  }
  static stringOpt(def) {
    return defineProp(String).def(def || null);
  }
  static numberishOpt(def) {
    return defineProp([Number, String]).def(def || null);
  }
}

exports.Prop = Prop;
exports.PropFactory = PropFactory;
exports.defineProp = defineProp;
exports.literalType = literalType;
