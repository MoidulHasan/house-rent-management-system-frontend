import Fuse from 'fuse.js';
import { ComputedRef, Ref } from 'vue-demi';

declare type FuseOptions<T> = Fuse.IFuseOptions<T>;
declare type FuseResult<T> = Fuse.FuseResult<T>;
declare type MaybeReactive<DataT> = ComputedRef<Array<DataT>> | Array<DataT> | Ref<Array<DataT>> | Ref<null> | Ref<null | Array<DataT>>;
declare class FuseJS<DataT> {
    /**
     * @type Ref
     */
    fuse: Ref<Fuse<DataT>>;
    /**
     * @type Ref
     */
    resultsRaw: Ref<FuseResult<DataT>[]>;
    /**
     * @type ComputedRef
     */
    results: ComputedRef<Array<DataT>>;
    /**
     * @type Ref
     */
    search: Ref<string>;
    /**
     * @type ComputedRef
     */
    noResults: ComputedRef<boolean>;
    /**
     * @param items
     * @param options
     */
    /**
     * It takes an array of items and an optional FuseOptions object, and then it creates a new Fuse instance with those
     * items and options, and then it runs the search with the current search value
     * @param items - DataT[] - The items to search through.
     * @param options - FuseOptions<DataT>
     */
    loadItems(items: DataT[], options?: FuseOptions<DataT>): void;
    /**
     * If there is no search string, clear the results. Otherwise, search the fuse
     * @param {string} [search] - The search string to use.
     * @returns The results of the search.
     */
    runSearch(search?: string): void;
    /**
     * We create a new Fuse instance with the list of items and options, and then we create a computed property that returns
     * the results of the search
     * @param list - This is the list of items that you want to search. It can be an array of items, or a reactive object
     * that contains an array of items.
     * @param options - FuseOptions<DataT>
     */
    constructor(list: MaybeReactive<DataT>, options?: FuseOptions<DataT>);
}
/**
 * It takes a list of data and an optional options object, and returns a FuseJS object that can be used to search the list
 * @param list - The list of data to search through.
 * @param [options] - FuseOptions<DataT>
 * @returns A new instance of the FuseJS class.
 */
declare function useFuseJs<DataT>(list: MaybeReactive<DataT>, options?: FuseOptions<DataT>): FuseJS<DataT>;

export { FuseJS, FuseOptions, FuseResult, MaybeReactive, useFuseJs };
